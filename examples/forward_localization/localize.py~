import numpy as np
import wcsng_utils as wu
import matplotlib.pyplot as plt
import geometry
import tqdm
from os.path import join, abspath

# Code control params - load 4 aps
aps = ['149', '151', '225', '227']

PATH = "~/data/forward_localization"

ap_pos = np.zeros((len(aps),2))
ap_th = np.zeros((len(aps)))
pred = []
rssi = []
for idx, a in enumerate(aps):
    ap = np.load(f'/home/wcsng/data/forward_localization_4th/post/gnd_{a}.npz')
    ap_pos[idx,:] = ap['xy']
    ap_th[idx] = ap['yaw']
    fi = np.load(f'/home/wcsng/data/forward_localization_4th/real_results/{a}-synced.npz')

    rssi.append(fi['rssi'])

    gndfi = np.load(f'/home/wcsng/data/forward_localization_4th/post/gnd_{a}.npz')
    pred.append(fi['gnd'])

    ap.close()
    fi.close()

pred =np.asarray(pred)
rssi = np.asarray(rssi)

loc = np.zeros((2,pred.shape[1]))
loc_lin = np.zeros_like(loc)

loc[:,0] = geometry.forward_localize(ap_pos,ap_th,pred[:,0])
weightsI = np.zeros((len(aps)))
weightsI[np.argmin(rssi[:,0])] = 0.0

weightArr = np.asarray([0.0,0.5,1.0,1.0])
for i in tqdm.trange(1,pred.shape[1]):
    weights = np.ones((len(aps)))
    ar = np.argsort(rssi[:,i])
    weights[ar[0]] = 0.0
    weights[ar[1]] = 0.5
    loc[:,i] = geometry.forward_localize(ap_pos, ap_th, pred[:,i], weights, p_start=loc[:,i-1])
    loc_lin[:,i] = geometry.forward_localize(ap_pos,ap_th,pred[:,i],weights)

bot_xy=np.load('/home/wcsng/data/forward_localization_4th/bot.npz')['xy']

err_aoa = np.linalg.norm(loc - bot_xy.T, axis=0)
err_lin = np.linalg.norm(loc_lin - bot_xy.T, axis=0)

c_aoa = np.sort(err_aoa)
c_lin = np.sort(err_lin)

plt.figure()
plt.plot(c_aoa, np.linspace(0,1,c_aoa.shape[0]), label='aoa')
plt.plot(c_lin, np.linspace(0,1,c_lin.shape[0]), label='huber')
plt.grid()
plt.legend()
plt.show()

np.savez_compressed('pred_gnd_aoa.npz', aoa_based=loc, linear=loc_lin)
